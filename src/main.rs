/* 
[2,3,2,10,4],
[3,2,2,10,4],
[4,2,2,11,5]
 */

// check SHA3 cryptographically secure
// 'cryptographic module', etc, check all section 3.3

/* #[no_mangle] // don't mangle the name of this function
pub(crate) extern "C" fn _start() -> ! {
    // this function is the entry point, since the linker looks for a function
    // named `_start` by default
    mlkem::keygen();
    loop {}
} */

/* use convert_compress::{byte_decode, byte_encode, compress, decompress};
use kpke::add_vecs;
pub(crate) fn main() {
    let m = [12, 107, 37, 77, 82, 168, 231, 141, 137, 143, 0, 54, 63, 43, 89, 58, 225, 226, 184, 54, 93, 168, 16, 102, 243, 172, 17, 192, 64, 16, 39, 46];
    
    let (ek,dk) = mlkem::keygen();
    let (k,c) = mlkem::encaps(&ek);
    let k = mlkem::decaps(&dk, &c);

    let mu = [0, 0, 1665, 1665, 0, 0, 0, 0, 1665, 1665, 0, 1665, 0, 1665, 1665, 0, 1665, 0, 1665, 0, 0, 1665, 0, 0, 1665, 0, 1665, 1665, 0, 0, 1665, 0, 0, 1665, 0, 0, 1665, 0, 1665, 0, 0, 0, 0, 1665, 0, 1665, 0, 1665, 1665, 1665, 1665, 0, 0, 1665, 1665, 1665, 1665, 0, 1665, 1665, 0, 0, 0, 1665, 1665, 0, 0, 1665, 0, 0, 0, 1665, 1665, 1665, 1665, 1665, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 1665, 0, 1665, 1665, 0, 0, 1665, 1665, 1665, 1665, 1665, 1665, 0, 0, 1665, 1665, 0, 1665, 0, 1665, 0, 0, 1665, 0, 0, 1665, 1665, 0, 1665, 0, 0, 1665, 0, 1665, 1665, 1665, 0, 0, 1665, 0, 0, 0, 0, 1665, 1665, 1665, 0, 1665, 0, 0, 0, 1665, 1665, 1665, 0, 0, 0, 1665, 1665, 1665, 0, 1665, 0, 1665, 1665, 0, 1665, 1665, 0, 0, 1665, 0, 1665, 1665, 1665, 0, 1665, 0, 0, 0, 0, 1665, 0, 1665, 0, 1665, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 1665, 1665, 0, 0, 1665, 1665, 0, 1665, 1665, 0, 0, 1665, 1665, 1665, 1665, 0, 0, 1665, 1665, 0, 1665, 0, 1665, 1665, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 1665, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 1665, 1665, 1665, 0, 0, 1665, 0, 0, 0, 1665, 1665, 1665, 0, 1665, 0, 0];
    let mu_tmp = [14, 3056, 883, 367, 1047, 848, 1633, 339, 1012, 3129, 3002, 25, 1823, 2388, 427, 2185, 1722, 2156, 2172, 1933, 1950, 333, 2763, 2426, 815, 1039, 1985, 2926, 2961, 1176, 520, 1051, 1522, 3316, 1644, 820, 1512, 2437, 412, 3148, 3226, 1943, 2057, 823, 129, 2309, 2453, 690, 1475, 2307, 1453, 1056, 2509, 2440, 2724, 2173, 1660, 1170, 1244, 487, 153, 3121, 3057, 286, 1258, 1836, 3253, 979, 838, 614, 1251, 1040, 958, 2212, 2392, 376, 1307, 1614, 563, 3020, 2999, 2530, 2140, 332, 2314, 1820, 1886, 83, 2242, 1186, 202, 665, 2696, 433, 1497, 2060, 530, 353, 1702, 1259, 1642, 2164, 319, 2206, 3303, 1288, 2213, 174, 1604, 1712, 3313, 157, 1881, 1515, 2299, 2696, 1044, 3053, 1266, 1525, 485, 971, 2791, 3120, 3040, 2446, 998, 332, 317, 2125, 2022, 91, 960, 199, 946, 2582, 3248, 1534, 2315, 2255, 2400, 3049, 378, 1782, 2502, 1500, 1181, 2657, 1643, 1842, 2294, 2022, 290, 533, 3204, 1616, 333, 1880, 2416, 1224, 2197, 3011, 1317, 2275, 781, 1288, 2039, 2421, 2422, 1471, 1599, 3047, 3171, 2935, 1113, 2648, 1883, 2139, 980, 1416, 2291, 1178, 564, 2481, 1005, 2758, 2815, 2100, 3251, 965, 573, 80, 2484, 2030, 1347, 756, 1284, 1543, 574, 1652, 1553, 354, 2168, 2683, 2627, 2125, 2686, 1537, 1250, 1580, 2028, 2323, 2313, 1795, 2268, 1414, 2424, 77, 2263, 1552, 2429, 3128, 2578, 114, 319, 2863, 1294, 2826, 30, 708, 191, 838, 2718, 3290, 1957, 3289, 656, 2344, 2469, 2307, 801, 2464, 449, 376, 1397, 254, 2160, 1911, 2850, 1220, 887, 104, 537, 295, 2393, 2030];
    let v = [14, 3056, 2548, 2032, 1047, 848, 1633, 339, 2677, 1465, 3002, 1690, 1823, 724, 2092, 2185, 58, 2156, 508, 1933, 1950, 1998, 2763, 2426, 2480, 1039, 321, 1262, 2961, 1176, 2185, 1051, 1522, 1652, 1644, 820, 3177, 2437, 2077, 3148, 3226, 1943, 2057, 2488, 129, 645, 2453, 2355, 3140, 643, 3118, 1056, 2509, 776, 1060, 509, 3325, 1170, 2909, 2152, 153, 3121, 3057, 1951, 2923, 1836, 3253, 2644, 838, 614, 1251, 2705, 2623, 548, 728, 2041, 1307, 1614, 563, 1356, 2999, 2530, 2140, 332, 2314, 1820, 1886, 83, 2242, 2851, 1867, 665, 1032, 2098, 1497, 2060, 2195, 2018, 38, 2924, 3307, 500, 319, 2206, 1639, 2953, 2213, 1839, 1604, 48, 3313, 157, 217, 1515, 2299, 1032, 2709, 3053, 2931, 1525, 485, 2636, 2791, 1456, 1376, 782, 998, 332, 1982, 2125, 2022, 91, 960, 1864, 2611, 918, 3248, 3199, 2315, 2255, 2400, 1385, 2043, 118, 2502, 1500, 1181, 993, 3308, 178, 2294, 358, 290, 2198, 1540, 1616, 1998, 216, 2416, 1224, 533, 3011, 2982, 611, 2446, 1288, 375, 2421, 2422, 1471, 1599, 1383, 3171, 1271, 1113, 984, 1883, 2139, 980, 1416, 627, 1178, 564, 2481, 1005, 1094, 1151, 2100, 3251, 2630, 2238, 80, 820, 366, 1347, 756, 2949, 3208, 2239, 3317, 1553, 354, 504, 1019, 2627, 461, 2686, 3202, 2915, 1580, 2028, 2323, 649, 1795, 2268, 1414, 2424, 77, 2263, 1552, 2429, 3128, 914, 1779, 319, 2863, 1294, 2826, 30, 708, 1856, 838, 2718, 3290, 1957, 3289, 2321, 2344, 2469, 2307, 2466, 800, 2114, 376, 1397, 1919, 2160, 1911, 2850, 2885, 2552, 1769, 537, 1960, 2393, 2030];
    
    let v_ = [0, 3121, 2497, 2081, 1040, 832, 1665, 416, 2705, 1456, 2913, 1665, 1873, 624, 2081, 2289, 0, 2081, 416, 1873, 1873, 2081, 2705, 2497, 2497, 1040, 416, 1248, 2913, 1248, 2289, 1040, 1456, 1665, 1665, 832, 3121, 2497, 2081, 3121, 0, 1873, 2081, 2497, 208, 624, 2497, 2289, 3121, 624, 3121, 1040, 2497, 832, 1040, 416, 0, 1248, 2913, 2081, 208, 3121, 3121, 1873, 2913, 1873, 0, 2705, 832, 624, 1248, 2705, 2705, 624, 624, 2081, 1248, 1665, 624, 1456, 2913, 2497, 2081, 416, 2289, 1873, 1873, 0, 2289, 2913, 1873, 624, 1040, 2081, 1456, 2081, 2289, 2081, 0, 2913, 0, 416, 416, 2289, 1665, 2913, 2289, 1873, 1665, 0, 0, 208, 208, 1456, 2289, 1040, 2705, 3121, 2913, 1456, 416, 2705, 2705, 1456, 1456, 832, 1040, 416, 2081, 2081, 2081, 0, 1040, 1873, 2705, 832, 0, 3121, 2289, 2289, 2497, 1456, 2081, 208, 2497, 1456, 1248, 1040, 0, 208, 2289, 416, 208, 2289, 1456, 1665, 2081, 208, 2497, 1248, 624, 2913, 2913, 624, 2497, 1248, 416, 2497, 2497, 1456, 1665, 1456, 3121, 1248, 1040, 1040, 1873, 2081, 1040, 1456, 624, 1248, 624, 2497, 1040, 1040, 1248, 2081, 0, 2705, 2289, 0, 832, 416, 1248, 832, 2913, 3121, 2289, 0, 1456, 416, 416, 1040, 2705, 416, 2705, 3121, 2913, 1665, 2081, 2289, 624, 1873, 2289, 1456, 2497, 0, 2289, 1456, 2497, 3121, 832, 1873, 416, 2913, 1248, 2913, 0, 624, 1873, 832, 2705, 0, 1873, 0, 2289, 2289, 2497, 2289, 2497, 832, 2081, 416, 1456, 1873, 2081, 1873, 2913, 2913, 2497, 1873, 624, 1873, 2497, 2081];
    let v_tmp = [2886, 1368, 2090, 1366, 1331, 2956, 2243, 1780, 1698, 1285, 2191, 3184, 1430, 2442, 1142, 137, 3128, 776, 672, 1535, 1400, 2880, 1525, 619, 909, 1725, 2187, 1697, 3062, 897, 310, 1190, 2490, 92, 2695, 2617, 2649, 1450, 1383, 1411, 2490, 1493, 1, 617, 649, 1361, 531, 2976, 2151, 2036, 2992, 541, 1326, 1020, 558, 2512, 1244, 1442, 557, 1100, 342, 1784, 2466, 1868, 1192, 972, 2601, 1703, 1288, 508, 1332, 3028, 719, 142, 931, 2418, 233, 2021, 1636, 722, 856, 2632, 2278, 1021, 1698, 1527, 2773, 1051, 1770, 3076, 638, 2177, 1138, 2371, 2358, 101, 747, 2236, 366, 1945, 1729, 1265, 1276, 969, 924, 2605, 3126, 1302, 2656, 2604, 2820, 234, 1991, 2148, 2688, 2360, 1578, 915, 185, 3180, 2344, 2890, 3255, 2850, 1470, 1818, 834, 838, 1945, 2807, 853, 3013, 2678, 176, 3195, 1977, 825, 1473, 1439, 2681, 1647, 3085, 3071, 3083, 955, 3147, 2486, 1724, 90, 877, 2333, 1821, 3218, 990, 2854, 329, 365, 303, 3095, 1630, 189, 2567, 631, 1134, 1956, 1170, 324, 2712, 1609, 1186, 460, 3190, 3035, 1164, 2389, 334, 2615, 570, 1920, 2144, 1286, 2199, 2414, 2198, 1198, 2818, 672, 615, 2873, 1265, 1391, 264, 217, 243, 837, 1032, 3258, 1491, 2928, 1940, 739, 954, 463, 345, 2176, 2228, 793, 1548, 2622, 111, 2279, 635, 1225, 1729, 1554, 277, 141, 1553, 587, 2629, 1857, 526, 1543, 1705, 551, 716, 1816, 2427, 206, 3296, 2263, 1003, 3054, 3243, 3192, 2453, 953, 1340, 2605, 2063, 508, 2244, 2491, 3083, 2893, 2765, 572, 2727, 2601, 2408, 707, 3043, 2612, 155, 938, 1540];
} */

use fips203;

pub(crate) fn main() {
    fips203::MLKEM_1024::new()
}